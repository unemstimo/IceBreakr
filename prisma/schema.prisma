// make prisma schema from sql https://sql-to-prisma.vercel.app/

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  // provider = "sqlite"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// Les om relasjoner osv
// https://www.prisma.io/docs/orm/prisma-schema

model User {
  userId               String                 @id @unique
  username             String                 @unique
  mail                 String                 @unique
  administrator        Boolean
  games                Game[]
  playlists            Playlist[]
  reportedGames        UserReportedGame[]
  reportedRatings      UserReportedRating[]
  UserFavouritedGame   UserFavoriteGame[]
  GameRating           GameRating[]
  UserFavoritePlaylist UserFavoritePlaylist[]

  @@index([userId])
}

model Game {
  gameId             Int                @id @unique @default(autoincrement())
  userId             String
  name               String
  duration           String
  numberOfPlayers    String
  rules              String
  description        String?
  user               User               @relation(fields: [userId], references: [userId])
  categories         Category[]
  playlists          Playlist[]
  ratings            GameRating[]
  GameInCategory     GameInCategory[]
  GameInPlaylist     GameInPlaylist[]
  UserFavouritedGame UserFavoriteGame[]
  UserReportedGame   UserReportedGame[]

  @@index([userId])
}

model Playlist {
  playlistId           Int                    @id @unique @default(autoincrement())
  name                 String                 @db.VarChar(255)
  userId               String
  description          String?
  user                 User                   @relation(fields: [userId], references: [userId])
  games                Game[]
  GameInPlaylist       GameInPlaylist[]
  UserFavoritePlaylist UserFavoritePlaylist[]

  @@index([userId])
}

model GameInPlaylist {
  gameId     Int
  playlistId Int
  game       Game     @relation(fields: [gameId], references: [gameId])
  playlist   Playlist @relation(fields: [playlistId], references: [playlistId])

  @@id([gameId, playlistId])
  @@index([gameId])
  @@index([playlistId])
}

model Category {
  categoryId     Int              @id @unique @default(autoincrement())
  name           String
  games          Game[]
  GameInCategory GameInCategory[]
}

model GameInCategory {
  gameId     Int
  categoryId Int
  game       Game     @relation(fields: [gameId], references: [gameId])
  category   Category @relation(fields: [categoryId], references: [categoryId])

  @@id([categoryId, gameId])
  @@index([categoryId])
  @@index([gameId])
}

model UserFavoriteGame {
  userId String
  gameId Int
  user   User   @relation(fields: [userId], references: [userId])
  game   Game   @relation(fields: [gameId], references: [gameId])

  @@id([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

model UserFavoritePlaylist {
  userId     String
  playlistId Int
  user       User     @relation(fields: [userId], references: [userId])
  playlist   Playlist @relation(fields: [playlistId], references: [playlistId])

  @@id([userId, playlistId])
  @@index([userId])
  @@index([playlistId])
}

model UserReportedGame {
  userId String
  gameId Int
  reason String?
  user   User    @relation(fields: [userId], references: [userId])
  game   Game    @relation(fields: [gameId], references: [gameId])

  @@id([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

model GameRating {
  ratingId           Int                  @id @unique @default(autoincrement())
  userId             String
  gameId             Int
  starRating         Int
  description        String?
  user               User                 @relation(fields: [userId], references: [userId])
  game               Game                 @relation(fields: [gameId], references: [gameId])
  UserReportedRating UserReportedRating[]

  @@index([userId])
  @@index([gameId])
}

model UserReportedRating {
  reporterId String
  ratingId   Int
  reason     String?
  user       User       @relation(fields: [reporterId], references: [userId])
  rating     GameRating @relation(fields: [ratingId], references: [ratingId])

  @@id([reporterId, ratingId])
  @@index([reporterId])
  @@index([ratingId])
}
